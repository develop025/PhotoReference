//::::::::::::::::::::::::::::::::::::::::::::::::: DEBUG :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::/
ext {
    PASS_SUFIX = "secret_for_pass"
    DEBUG_KEY_NAME = "debugkey"
}
//::::::::::::::::::::::::::::::::::::::::::::::::: DEBUG :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::/
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::/

//::::::::::::::::::::::::::::::::::::::::::::::::: COMMON ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::/
ext.buildConfigField = { flavor, name, value, shouldEncrypt = false ->
    if (shouldEncrypt) flavor.buildConfigField "String", name, "\"" + encrypt(value) + "\""
    else flavor.buildConfigField "String", name, "\"" + value + "\""
}

ext.applyConfig = {
    android {
        compileSdkVersion rootProject.compileSdkVersion

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        defaultConfig {
            targetSdkVersion rootProject.targetSdkVersion
            minSdkVersion rootProject.minSdkVersion

            versionCode rootProject.versionCode
            versionName "${rootProject.versionCode}.0"

            initDefaultResValues()
        }

        buildTypes {
            debug {
                minifyEnabled rootProject.enableDebugMinify
                shrinkResources rootProject.enableDebugMinify

                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                applicationVariants.all { variant ->
                    renameAPK(variant, defaultConfig, variant.name)
                }
            }

            release {
                minifyEnabled true
                shrinkResources true

                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                applicationVariants.all { variant ->
                    renameAPK(variant, defaultConfig, variant.name)
                }
            }
        }

        def keyFile = file("../${rootProject.name}.jks")
        def testKeyFile = file("../${DEBUG_KEY_NAME}.jks")

        if (!keyFile.exists()) preBuild.dependsOn createKeystore

        if (!testKeyFile.exists()) preBuild.dependsOn createTestKeystore

        signingConfigs {
            develop {
                storeFile testKeyFile
                storePassword "${stripExtension(testKeyFile.getName())}_${PASS_SUFIX.toString()}"
                keyAlias stripExtension(testKeyFile.getName())
                keyPassword "${stripExtension(testKeyFile.getName())}_${PASS_SUFIX.toString()}"
            }

            finalRelease {
                storeFile keyFile
                storePassword "${stripExtension(keyFile.getName())}_${PASS_SUFIX.toString()}"
                keyAlias stripExtension(keyFile.getName())
                keyPassword "${stripExtension(keyFile.getName())}_${PASS_SUFIX.toString()}"
            }
        }

        flavorDimensions "version"
        productFlavors {
            develop {
                dimension "version"
                applicationId "play.game.dev"
                signingConfig signingConfigs.develop
            }
            finalRelease {
                dimension "version"
                applicationId rootProject.applicationId
                signingConfig signingConfigs.finalRelease
            }
        }
    }
}

ext.initDefaultResValues = {
    android {
        defaultConfig {
            resValue "string", "app_name", "${rootProject.appName}"
        }
    }
}
//::::::::::::::::::::::::::::::::::::::::::::::::: COMMON ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::/
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::/

//::::::::::::::::::::::::::::::::::::::::::::::::: METHODS :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::/
import java.security.MessageDigest

ext.throwLog = { text ->
    throw new GradleException(text)
}

ext.encrypt = { str ->
    return str.bytes.encodeBase64().toString().bytes.encodeBase64().toString()
}

ext.generateHash = {
    MessageDigest.getInstance("MD5").digest(Math.random().toString().bytes).encodeHex().toString().substring(0, 8)
}

ext.createKeystoreCommand = { rawName ->
    println("PASS_GENERATE:${rawName}_${PASS_SUFIX}")
    def command = "keytool -genkey -v -keystore ${rawName}.jks -alias ${rawName} -keypass ${rawName}_${PASS_SUFIX} " +
            "-storepass ${rawName}_${PASS_SUFIX} -keyalg RSA -keysize 2048 -validity 10000 -dname \"cn=${generateHash()}\""
    return command
}

task createKeystore(type: Exec) {
    workingDir '..'
    def command = createKeystoreCommand(rootProject.name)

    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine 'cmd', '/c', command
    } else {
        commandLine 'sh', '-c', command
    }
}

task createTestKeystore(type: Exec) {
    workingDir '..'
    def command = createKeystoreCommand(DEBUG_KEY_NAME)

    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine 'cmd', '/c', command
    } else {
        commandLine 'sh', '-c', command
    }
}

ext.getFile = { File fileP, name = null ->
    try {
        def filename = fileP.list(new FilenameFilter() {
            @Override
            boolean accept(File file1, String s) {
                if (name != null) return s == name
                else return file1.isDirectory() && !s.startsWith(".") && !file1.isHidden()
            }
        })[0]
        return file(fileP.getPath() + "\\" + filename)
    } catch (Exception e) {
        println(e.toString())
        return null
    }
}

ext.stripExtension = { filename -> return filename.split("\\.")[0] }

def renameAPK(variant, defaultConfig, buildType) {
    variant.outputs.all { output ->
        outputFileName = "v${defaultConfig.versionName}_${variant.applicationId}_${buildType}.apk"
    }
}
//::::::::::::::::::::::::::::::::::::::::::::::::: METHODS :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::/
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::/